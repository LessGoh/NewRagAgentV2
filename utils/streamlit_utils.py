import streamlit as st
from typing import List, Dict
import plotly.express as px
import pandas as pd

class StreamlitUtils:
    """–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Streamlit"""
    
    @staticmethod
    def init_session_state():
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
        if "messages" not in st.session_state:
            st.session_state.messages = []
        if "agent" not in st.session_state:
            st.session_state.agent = None
    
    @staticmethod
    def display_message(message: Dict[str, str]):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ"""
        with st.chat_message(message["role"]):
            st.markdown(message["content"])
    
    @staticmethod
    def create_sidebar():
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        with st.sidebar:
            st.markdown("## üéõÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
            with st.expander("‚ÑπÔ∏è –û —Å–∏—Å—Ç–µ–º–µ"):
                st.markdown("""
                **ArXiv Finance Research Assistant** - —ç—Ç–æ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                –Ω–∞—É—á–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π –ø–æ —Ñ–∏–Ω–∞–Ω—Å–∞–º –∏–∑ –±–∞–∑—ã ArXiv.
                
                **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
                - –ü–æ–∏—Å–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
                - –ê–Ω–∞–ª–∏–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤  
                - –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ–¥—Ö–æ–¥–æ–≤
                - –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–∞—É—á–Ω—ã—Ö —Ä–∞–±–æ—Ç
                """)
            
            # –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã
            st.markdown("### üöÄ –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã")
            
            suggestions = [
                "RSI —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏",
                "MACD vs RSI", 
                "Volatile market strategies",
                "ML in trading research"
            ]
            
            for suggestion in suggestions:
                if st.button(suggestion, key=f"btn_{suggestion}"):
                    return suggestion
            
            # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
            if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"):
                st.session_state.messages = []
                if st.session_state.agent:
                    st.session_state.agent.clear_history()
                st.rerun()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            with st.expander("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏"):
                msg_count = len(st.session_state.messages)
                st.metric("–°–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ—Å—Å–∏–∏", msg_count)
        
        return None
    
    @staticmethod
    def show_welcome():
        """–ü–æ–∫–∞–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        st.markdown("""
        ## üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!
        
        –Ø –≤–∞—à AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π. 
        –ú–æ–≥—É –ø–æ–º–æ—á—å —Å:
        
        - üìà **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏** –∏ —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏
        - üîç **–ü–æ–∏—Å–∫–æ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π** –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Ç–µ–º–∞–º
        - ‚öñÔ∏è **–°—Ä–∞–≤–Ω–µ–Ω–∏–µ–º –ø–æ–¥—Ö–æ–¥–æ–≤** –∏ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–π
        - üìä **–ê–Ω–∞–ª–∏–∑–æ–º —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π**
        
        ### üí° –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:
        """)
        
        examples = [
            "–ü–æ–∫–∞–∂–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å RSI –¥–ª—è –¥–Ω–µ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏",
            "–°—Ä–∞–≤–Ω–∏ MACD –∏ Bollinger Bands",
            "–ù–∞–π–¥–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø–æ algorithmic trading",
            "–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞"
        ]
        
        for example in examples:
            st.markdown(f"- *{example}*")
    
    @staticmethod 
    def display_typing_indicator():
        """–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–Ω–∏—è"""
        with st.chat_message("assistant"):
            with st.empty():
                st.markdown("ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...")
    
    @staticmethod
    def format_agent_response(response: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∞–≥–µ–Ω—Ç–∞"""
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è
        if "—Å—Ç—Ä–∞—Ç–µ–≥" in response.lower():
            response = "üìà " + response
        elif "–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω" in response.lower():
            response = "üî¨ " + response  
        elif "—Å—Ä–∞–≤–Ω–µ–Ω" in response.lower():
            response = "‚öñÔ∏è " + response
        elif "–æ—à–∏–±–∫–∞" in response.lower():
            response = "‚ùå " + response
        
        return response

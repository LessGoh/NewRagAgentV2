import streamlit as st
import os
from config import Config, validate_config
from agents.finance_agent import FinanceAnalysisAgent
from utils.streamlit_utils import StreamlitUtils

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title=Config.APP_TITLE,
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    st.title("ü§ñ " + Config.APP_TITLE)
    st.markdown(f"*{Config.APP_DESCRIPTION}*")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Ç–∏–ª–∏—Ç
    utils = StreamlitUtils()
    utils.init_session_state()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    try:
        validate_config()
    except ValueError as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        st.info("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ.")
        st.stop()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞
    if st.session_state.agent is None:
        with st.spinner("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞..."):
            try:
                st.session_state.agent = FinanceAnalysisAgent()
                st.success("‚úÖ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
                st.stop()
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    quick_command = utils.create_sidebar()
    
    # –í —Ñ—É–Ω–∫—Ü–∏–∏ main() –¥–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É
    if st.button("üîç –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π"):
        try:
            from utils.llama_client import LlamaIndexClient
            client = LlamaIndexClient()
            result = client.query("test query", top_k=1)
            
            if result.get("error"):
                st.error(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
            else:
                st.success("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                st.json(result)
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–∞—Ç–∞
    if not st.session_state.messages:
        utils.show_welcome()
    else:
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        for message in st.session_state.messages:
            utils.display_message(message)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä–æ–π –∫–æ–º–∞–Ω–¥—ã –∏–∑ sidebar
    if quick_command:
        st.session_state.messages.append({"role": "user", "content": quick_command})
        utils.display_message({"role": "user", "content": quick_command})
        
        with st.chat_message("assistant"):
            with st.spinner("ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é..."):
                response = st.session_state.agent.chat(quick_command)
                formatted_response = utils.format_agent_response(response)
                st.markdown(formatted_response)
        
        st.session_state.messages.append({"role": "assistant", "content": formatted_response})
        st.rerun()
    
    # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if prompt := st.chat_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö..."):
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        st.session_state.messages.append({"role": "user", "content": prompt})
        utils.display_message({"role": "user", "content": prompt})
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
        with st.chat_message("assistant"):
            with st.spinner("ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è..."):
                try:
                    response = st.session_state.agent.chat(prompt)
                    formatted_response = utils.format_agent_response(response)
                    st.markdown(formatted_response)
                except Exception as e:
                    error_msg = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
                    st.error(error_msg)
                    formatted_response = error_msg
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
        st.session_state.messages.append({"role": "assistant", "content": formatted_response})

if __name__ == "__main__":
    main()

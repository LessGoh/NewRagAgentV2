from typing import Optional
from llama_index.core.tools import FunctionTool
import os

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ LlamaIndex –∫–ª–∏–µ–Ω—Ç
try:
    from utils.llama_client import LlamaIndexClient
    LLAMA_AVAILABLE = True
except ImportError:
    LLAMA_AVAILABLE = False

class FinanceTools:
    """–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    
    def __init__(self):
        if LLAMA_AVAILABLE and os.getenv("LLAMA_INDEX_URL"):
            try:
                self.llama_client = LlamaIndexClient()
                self.use_llamaindex = True
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ LlamaIndex: {e}")
                self.use_llamaindex = False
        else:
            self.use_llamaindex = False
    
    def search_indicator_strategies(self, indicator_name: str, timeframe: str = "any") -> str:
        """–ü–æ–∏—Å–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞"""
        
        if not self.use_llamaindex:
            return f"""
üîç **–ü–æ–∏—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è {indicator_name.upper()}** (–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)

‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** LlamaIndex –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. 
–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ ArXiv —Å—Ç–∞—Ç–µ–π –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ:
- LLAMA_INDEX_URL 
- LLAMA_INDEX_API_KEY

**–ü—Ä–∏–º–µ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {indicator_name.upper()}:**
- –ü–æ–∫—É–ø–∫–∞ –ø—Ä–∏ RSI < 30 (–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å)
- –ü—Ä–æ–¥–∞–∂–∞ –ø—Ä–∏ RSI > 70 (–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å)
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –ª–æ–∂–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
"""
        
        try:
            query = f"—Ç–æ—Ä–≥–æ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {indicator_name} —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ {timeframe if timeframe != 'any' else ''} —É—Å–ª–æ–≤–∏—è –≤—Ö–æ–¥–∞ –≤—ã—Ö–æ–¥–∞"
            result = self.llama_client.query(query, top_k=7)
            
            if result.get("error"):
                return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π: {result['error']}"
            
            response = result.get("response", "")
            sources = result.get("source_nodes", [])
            
            formatted_response = f"""
üìä **–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º {indicator_name.upper()}** (–∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π ArXiv)

{response}

üìö **–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–∑ –Ω–∞—É—á–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π:**
"""
            
            for i, source in enumerate(sources[:3], 1):
                if hasattr(source, 'metadata'):
                    title = source.metadata.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç–∞—Ç—å—è')
                    formatted_response += f"{i}. {title}\n"
            
            return formatted_response
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π: {str(e)}"

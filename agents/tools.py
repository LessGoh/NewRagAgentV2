from typing import Optional
from llama_index.core.tools import FunctionTool
from utils.llama_client import LlamaIndexClient

class FinanceTools:
    """–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    
    def __init__(self):
        self.llama_client = LlamaIndexClient()
    
    def search_indicator_strategies(self, 
                                  indicator_name: str, 
                                  timeframe: str = "any") -> str:
        """
        –ü–æ–∏—Å–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞.
        
        Args:
            indicator_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ (RSI, MACD, SMA, EMA, Bollinger Bands, etc.)
            timeframe: –¢–∞–π–º—Ñ—Ä–µ–π–º (1min, 5min, 15min, 1h, 4h, 1d, etc.)
        
        Returns:
            –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
        """
        try:
            timeframe_filter = None if timeframe == "any" else timeframe
            result = self.llama_client.search_indicators(indicator_name, timeframe_filter)
            
            if result.get("error"):
                return f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {result['error']}"
            
            response = result.get("response", "")
            sources = result.get("source_nodes", [])
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            formatted_response = f"""
üìä **–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º {indicator_name.upper()}**

{response}

üìö **–ò—Å—Ç–æ—á–Ω–∏–∫–∏:**
"""
            for i, source in enumerate(sources[:3], 1):
                if hasattr(source, 'metadata'):
                    title = source.metadata.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç–∞—Ç—å—è')
                    formatted_response += f"{i}. {title}\n"
            
            return formatted_response
            
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {str(e)}"
    
    def compare_strategies(self, strategy1: str, strategy2: str) -> str:
        """
        –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤—É—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏–ª–∏ –ø–æ–¥—Ö–æ–¥–æ–≤.
        
        Args:
            strategy1: –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            strategy2: –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        
        Returns:
            –î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        """
        try:
            query = f"—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π {strategy1} –ø—Ä–æ—Ç–∏–≤ {strategy2} –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∏"
            result = self.llama_client.query(query, top_k=6)
            
            if result.get("error"):
                return f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {result['error']}"
            
            response = result.get("response", "")
            
            formatted_response = f"""
‚öñÔ∏è **–°—Ä–∞–≤–Ω–µ–Ω–∏–µ: {strategy1.title()} vs {strategy2.title()}**

{response}

üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** –í—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–∞—à–∏—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ü–µ–ª–µ–π, —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞ –∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π.
"""
            return formatted_response
            
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {str(e)}"
    
    def analyze_market_conditions(self, 
                                market_type: str, 
                                analysis_type: str = "technical") -> str:
        """
        –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π.
        
        Args:
            market_type: –¢–∏–ø —Ä—ã–Ω–∫–∞ (trending, sideways, volatile, bearish, bullish, crisis)
            analysis_type: –¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞ (technical, fundamental, behavioral, quantitative)
        
        Returns:
            –ê–Ω–∞–ª–∏–∑ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
        """
        try:
            result = self.llama_client.search_strategies(
                f"{analysis_type} –∞–Ω–∞–ª–∏–∑", 
                market_type
            )
            
            if result.get("error"):
                return f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {result['error']}"
            
            response = result.get("response", "")
            
            formatted_response = f"""
üìà **–ê–Ω–∞–ª–∏–∑ –¥–ª—è {market_type.upper()} —Ä—ã–Ω–∫–∞ ({analysis_type} –ø–æ–¥—Ö–æ–¥)**

{response}

‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –í—Å–µ–≥–¥–∞ —É—á–∏—Ç—ã–≤–∞–π—Ç–µ —Ä–∏—Å–∫–∏ –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–æ–ø-–ª–æ—Å—Å—ã –ø—Ä–∏ —Ç–æ—Ä–≥–æ–≤–ª–µ.
"""
            return formatted_response
            
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π: {str(e)}"
    
    def find_research_papers(self, topic: str, year_from: int = 2020) -> str:
        """
        –ü–æ–∏—Å–∫ –Ω–∞—É—á–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –ø–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Ç–µ–º–∞—Ç–∏–∫–µ.
        
        Args:
            topic: –¢–µ–º–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: "machine learning trading", "behavioral finance")
            year_from: –ì–æ–¥ –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2020)
        
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è—Ö
        """
        try:
            result = self.llama_client.search_research(topic, year_from)
            
            if result.get("error"):
                return f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {result['error']}"
            
            response = result.get("response", "")
            sources = result.get("source_nodes", [])
            
            formatted_response = f"""
üî¨ **–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø–æ —Ç–µ–º–µ: {topic.title()}**

{response}

üìÑ **–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏:**
"""
            for i, source in enumerate(sources[:5], 1):
                if hasattr(source, 'metadata'):
                    title = source.metadata.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç–∞—Ç—å—è')
                    authors = source.metadata.get('authors', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∞–≤—Ç–æ—Ä—ã')
                    formatted_response += f"{i}. **{title}** - {authors}\n"
            
            return formatted_response
            
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π: {str(e)}"
    
    def get_tools(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–≥–µ–Ω—Ç–∞"""
        return [
            FunctionTool.from_defaults(self.search_indicator_strategies),
            FunctionTool.from_defaults(self.compare_strategies),
            FunctionTool.from_defaults(self.analyze_market_conditions),
            FunctionTool.from_defaults(self.find_research_papers)
        ]
